// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NOAM_ASISTENCIA_v3.Server.Data;

#nullable disable

namespace NOAM_ASISTENCIA_v3.Server.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240312021418_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<NOAM_ASISTENCIA_v3.Server.Domain.UsuarioRolId>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<NOAM_ASISTENCIA_v3.Server.Domain.UsuarioRolId>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<NOAM_ASISTENCIA_v3.Server.Domain.UsuarioRolId>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<NOAM_ASISTENCIA_v3.Server.Domain.UsuarioRolId>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<NOAM_ASISTENCIA_v3.Server.Domain.UsuarioRolId>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("ForgotPassword")
                        .HasColumnType("bit");

                    b.Property<bool>("Lockout")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TurnoId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TurnoId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NOAM_ASISTENCIA_v3.Server.Domain.Asistencia", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("SucursalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaEntrada")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaSalida")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaUtcAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaUtcEdita")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaUtcElimina")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioAltaId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEditaId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEliminaId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "SucursalId", "FechaEntrada");

                    b.HasIndex("SucursalId");

                    b.HasIndex("UsuarioAltaId");

                    b.HasIndex("UsuarioEditaId");

                    b.HasIndex("UsuarioEliminaId");

                    b.ToTable("Asistencia");
                });

            modelBuilder.Entity("NOAM_ASISTENCIA_v3.Server.Domain.Sucursal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodigoId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaUtcAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaUtcEdita")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaUtcElimina")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioAltaId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEditaId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEliminaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAltaId");

                    b.HasIndex("UsuarioEditaId");

                    b.HasIndex("UsuarioEliminaId");

                    b.ToTable("Sucursal");
                });

            modelBuilder.Entity("NOAM_ASISTENCIA_v3.Server.Domain.Turno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("FechaUtcAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaUtcEdita")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaUtcElimina")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioAltaId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEditaId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioEliminaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAltaId");

                    b.HasIndex("UsuarioEditaId");

                    b.HasIndex("UsuarioEliminaId");

                    b.ToTable("Turno");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<NOAM_ASISTENCIA_v3.Server.Domain.UsuarioRolId>", b =>
                {
                    b.HasOne("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<NOAM_ASISTENCIA_v3.Server.Domain.UsuarioRolId>", b =>
                {
                    b.HasOne("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<NOAM_ASISTENCIA_v3.Server.Domain.UsuarioRolId>", b =>
                {
                    b.HasOne("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<NOAM_ASISTENCIA_v3.Server.Domain.UsuarioRolId>", b =>
                {
                    b.HasOne("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<NOAM_ASISTENCIA_v3.Server.Domain.UsuarioRolId>", b =>
                {
                    b.HasOne("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationUser", b =>
                {
                    b.HasOne("NOAM_ASISTENCIA_v3.Server.Domain.Turno", "Turno")
                        .WithMany("Usuarios")
                        .HasForeignKey("TurnoId");

                    b.Navigation("Turno");
                });

            modelBuilder.Entity("NOAM_ASISTENCIA_v3.Server.Domain.Asistencia", b =>
                {
                    b.HasOne("NOAM_ASISTENCIA_v3.Server.Domain.Sucursal", "Sucursal")
                        .WithMany("Asistencias")
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationUser", "UsuarioAlta")
                        .WithMany()
                        .HasForeignKey("UsuarioAltaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationUser", "UsuarioEdita")
                        .WithMany()
                        .HasForeignKey("UsuarioEditaId");

                    b.HasOne("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationUser", "UsuarioElimina")
                        .WithMany()
                        .HasForeignKey("UsuarioEliminaId");

                    b.HasOne("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationUser", "Usuario")
                        .WithMany("Asistencias")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sucursal");

                    b.Navigation("Usuario");

                    b.Navigation("UsuarioAlta");

                    b.Navigation("UsuarioEdita");

                    b.Navigation("UsuarioElimina");
                });

            modelBuilder.Entity("NOAM_ASISTENCIA_v3.Server.Domain.Sucursal", b =>
                {
                    b.HasOne("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationUser", "UsuarioAlta")
                        .WithMany()
                        .HasForeignKey("UsuarioAltaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationUser", "UsuarioEdita")
                        .WithMany()
                        .HasForeignKey("UsuarioEditaId");

                    b.HasOne("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationUser", "UsuarioElimina")
                        .WithMany()
                        .HasForeignKey("UsuarioEliminaId");

                    b.Navigation("UsuarioAlta");

                    b.Navigation("UsuarioEdita");

                    b.Navigation("UsuarioElimina");
                });

            modelBuilder.Entity("NOAM_ASISTENCIA_v3.Server.Domain.Turno", b =>
                {
                    b.HasOne("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationUser", "UsuarioAlta")
                        .WithMany()
                        .HasForeignKey("UsuarioAltaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationUser", "UsuarioEdita")
                        .WithMany()
                        .HasForeignKey("UsuarioEditaId");

                    b.HasOne("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationUser", "UsuarioElimina")
                        .WithMany()
                        .HasForeignKey("UsuarioEliminaId");

                    b.Navigation("UsuarioAlta");

                    b.Navigation("UsuarioEdita");

                    b.Navigation("UsuarioElimina");
                });

            modelBuilder.Entity("NOAM_ASISTENCIA_v3.Server.Domain.ApplicationUser", b =>
                {
                    b.Navigation("Asistencias");
                });

            modelBuilder.Entity("NOAM_ASISTENCIA_v3.Server.Domain.Sucursal", b =>
                {
                    b.Navigation("Asistencias");
                });

            modelBuilder.Entity("NOAM_ASISTENCIA_v3.Server.Domain.Turno", b =>
                {
                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
